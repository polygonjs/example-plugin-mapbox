import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
import { HemisphereLightObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/HemisphereLight";
import { MapboxCameraObjNode } from "@polygonjs/plugin-mapbox/dist/src/engine/nodes/obj/MapboxCamera";
import { PerspectiveCameraObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/PerspectiveCamera";
import { RenderersNetworkObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/RenderersNetwork";
// sop
import { AddSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Add";
import { BoxSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Box";
import { CSS2DObjectSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CSS2DObject";
import { EventsNetworkSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/EventsNetwork";
import { MapboxTransformSopNode } from "@polygonjs/plugin-mapbox/dist/src/engine/nodes/sop/MapboxTransform";
import { PlaneHelperSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PlaneHelper";
import { TransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Transform";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";
// rop
import { CSS2DRendererRopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/rop/CSS2DRenderer";

export class PolySceneWithNodeMap_marker_demo extends PolyScene {
  node(path: "/hemisphereLight1"): HemisphereLightObjNode;
  node(path: "/mapboxCamera1"): MapboxCameraObjNode;
  node(path: "/perspectiveCamera1"): PerspectiveCameraObjNode;
  node(path: "/perspectiveCamera1/events1"): EventsNetworkSopNode;
  node(
    path: "/perspectiveCamera1/events1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/grid"): GeoObjNode;
  node(path: "/grid/planeHelper1"): PlaneHelperSopNode;
  node(path: "/geo1"): GeoObjNode;
  node(path: "/geo1/box1"): BoxSopNode;
  node(path: "/geo1/add1"): AddSopNode;
  node(path: "/geo1/transform1"): TransformSopNode;
  node(path: "/geo1/mapboxTransform1"): MapboxTransformSopNode;
  node(path: "/geo1/CSS2DObject1"): CSS2DObjectSopNode;
  node(path: "/renderersNetwork1"): RenderersNetworkObjNode;
  node(path: "/renderersNetwork1/CSS2DRenderer1"): CSS2DRendererRopNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_marker_demo {
  "hemisphereLight1--skyColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--skyColor-skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColor-skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--skyColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor"?: ParamValueSerializedTypeMap["color"];
  "hemisphereLight1--groundColor-groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColor-groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorr"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorg"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--groundColorb"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position"?: ParamValueSerializedTypeMap["vector3"];
  "hemisphereLight1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionx"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positiony"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--positionz"?: ParamValueSerializedTypeMap["float"];
  "hemisphereLight1--name"?: ParamValueSerializedTypeMap["string"];
  "mapboxCamera1--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "mapboxCamera1--style"?: ParamValueSerializedTypeMap["string"];
  "mapboxCamera1--lngLat"?: ParamValueSerializedTypeMap["vector2"];
  "mapboxCamera1--lngLat-lngLatx"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--lngLat-lngLaty"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--lngLatx"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--lngLaty"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--zoom"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--zoomRange"?: ParamValueSerializedTypeMap["vector2"];
  "mapboxCamera1--zoomRange-zoomRangex"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--zoomRange-zoomRangey"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--zoomRangex"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--zoomRangey"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--pitch"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--bearing"?: ParamValueSerializedTypeMap["float"];
  "mapboxCamera1--updateParamsFromMap"?: ParamValueSerializedTypeMap["button"];
  "mapboxCamera1--allowDragRotate"?: ParamValueSerializedTypeMap["boolean"];
  "mapboxCamera1--addZoomControl"?: ParamValueSerializedTypeMap["boolean"];
  "mapboxCamera1--tlayerBuildings"?: ParamValueSerializedTypeMap["boolean"];
  "mapboxCamera1--tlayer3D"?: ParamValueSerializedTypeMap["boolean"];
  "mapboxCamera1--tlayerSky"?: ParamValueSerializedTypeMap["boolean"];
  "mapboxCamera1--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "mapboxCamera1--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--transform"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--t"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ty"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--tz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--ry"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--rz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sy"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--sz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--scale"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--camera"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--controls"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--updateFromControlsMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--near"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--far"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--display"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--fov"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--frameMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--expectedAspectRatio"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "perspectiveCamera1--layer"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1--render"?: ParamValueSerializedTypeMap["folder"];
  "perspectiveCamera1--setScene"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--scene"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--renderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--setCSSRenderer"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--CSSRenderer"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1--doPostProcess"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1--postProcessNode"?: ParamValueSerializedTypeMap["node_path"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "perspectiveCamera1-events1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "grid--transform"?: ParamValueSerializedTypeMap["folder"];
  "grid--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "grid--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "grid--t"?: ParamValueSerializedTypeMap["vector3"];
  "grid--t-tx"?: ParamValueSerializedTypeMap["float"];
  "grid--t-ty"?: ParamValueSerializedTypeMap["float"];
  "grid--t-tz"?: ParamValueSerializedTypeMap["float"];
  "grid--tx"?: ParamValueSerializedTypeMap["float"];
  "grid--ty"?: ParamValueSerializedTypeMap["float"];
  "grid--tz"?: ParamValueSerializedTypeMap["float"];
  "grid--r"?: ParamValueSerializedTypeMap["vector3"];
  "grid--r-rx"?: ParamValueSerializedTypeMap["float"];
  "grid--r-ry"?: ParamValueSerializedTypeMap["float"];
  "grid--r-rz"?: ParamValueSerializedTypeMap["float"];
  "grid--rx"?: ParamValueSerializedTypeMap["float"];
  "grid--ry"?: ParamValueSerializedTypeMap["float"];
  "grid--rz"?: ParamValueSerializedTypeMap["float"];
  "grid--s"?: ParamValueSerializedTypeMap["vector3"];
  "grid--s-sx"?: ParamValueSerializedTypeMap["float"];
  "grid--s-sy"?: ParamValueSerializedTypeMap["float"];
  "grid--s-sz"?: ParamValueSerializedTypeMap["float"];
  "grid--sx"?: ParamValueSerializedTypeMap["float"];
  "grid--sy"?: ParamValueSerializedTypeMap["float"];
  "grid--sz"?: ParamValueSerializedTypeMap["float"];
  "grid--scale"?: ParamValueSerializedTypeMap["float"];
  "grid--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "grid--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "grid--display"?: ParamValueSerializedTypeMap["boolean"];
  "grid--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "grid-planeHelper1--size"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorCenterLine"?: ParamValueSerializedTypeMap["color"];
  "grid-planeHelper1--colorCenterLine-colorCenterLiner"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorCenterLine-colorCenterLineg"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorCenterLine-colorCenterLineb"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorCenterLiner"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorCenterLineg"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorCenterLineb"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorGrid"?: ParamValueSerializedTypeMap["color"];
  "grid-planeHelper1--colorGrid-colorGridr"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorGrid-colorGridg"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorGrid-colorGridb"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorGridr"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorGridg"?: ParamValueSerializedTypeMap["float"];
  "grid-planeHelper1--colorGridb"?: ParamValueSerializedTypeMap["float"];
  "geo1--transform"?: ParamValueSerializedTypeMap["folder"];
  "geo1--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "geo1--display"?: ParamValueSerializedTypeMap["boolean"];
  "geo1--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-box1--size"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizes"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-box1--sizes-sizesx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizes-sizesy"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizes-sizesz"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizesx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizesy"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--sizesz"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--divisions"?: ParamValueSerializedTypeMap["integer"];
  "geo1-box1--center"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-box1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--centerx"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--centery"?: ParamValueSerializedTypeMap["float"];
  "geo1-box1--centerz"?: ParamValueSerializedTypeMap["float"];
  "geo1-add1--createPoint"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-add1--pointsCount"?: ParamValueSerializedTypeMap["integer"];
  "geo1-add1--position"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-add1--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "geo1-add1--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "geo1-add1--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "geo1-add1--positionx"?: ParamValueSerializedTypeMap["float"];
  "geo1-add1--positiony"?: ParamValueSerializedTypeMap["float"];
  "geo1-add1--positionz"?: ParamValueSerializedTypeMap["float"];
  "geo1-add1--connectInputPoints"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-add1--connectToLastPoint"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-transform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectMode"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--objectTransformSpace"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--group"?: ParamValueSerializedTypeMap["string"];
  "geo1-transform1--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "geo1-transform1--t"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--t-tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--t-tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--tz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--r-rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--r-rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--ry"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--rz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--s-sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--s-sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sy"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--sz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--scale"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot"?: ParamValueSerializedTypeMap["vector3"];
  "geo1-transform1--pivot-pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivot-pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotx"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivoty"?: ParamValueSerializedTypeMap["float"];
  "geo1-transform1--pivotz"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--useBounds"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-mapboxTransform1--southWest"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-mapboxTransform1--southWest-southWestx"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--southWest-southWesty"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--southWestx"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--southWesty"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--northEast"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-mapboxTransform1--northEast-northEastx"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--northEast-northEasty"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--northEastx"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--northEasty"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--useZoom"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-mapboxTransform1--zoom"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--mapboxCamera"?: ParamValueSerializedTypeMap["node_path"];
  "geo1-mapboxTransform1--zoomRange"?: ParamValueSerializedTypeMap["vector2"];
  "geo1-mapboxTransform1--zoomRange-zoomRangex"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--zoomRange-zoomRangey"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--zoomRangex"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--zoomRangey"?: ParamValueSerializedTypeMap["float"];
  "geo1-mapboxTransform1--updateAlwaysAllowed"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-mapboxTransform1--updateAlways"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-CSS2DObject1--useIdAttrib"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-CSS2DObject1--id"?: ParamValueSerializedTypeMap["string"];
  "geo1-CSS2DObject1--useClassAttrib"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-CSS2DObject1--className"?: ParamValueSerializedTypeMap["string"];
  "geo1-CSS2DObject1--useHTMLAttrib"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-CSS2DObject1--html"?: ParamValueSerializedTypeMap["string"];
  "geo1-CSS2DObject1--copyAttributes"?: ParamValueSerializedTypeMap["boolean"];
  "geo1-CSS2DObject1--attributesToCopy"?: ParamValueSerializedTypeMap["string"];
  "renderersNetwork1-CSS2DRenderer1--css"?: ParamValueSerializedTypeMap["string"];
}
